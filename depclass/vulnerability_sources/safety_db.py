import logging
from typing import Any, Dict, List

import requests
from safety.safety import get_vulnerabilities

from .base import VulnerabilitySource


class SafetyDBSource(VulnerabilitySource):
    def __init__(self, config, installed_packages: Dict[str, str], cache):
        self.installed_packages = installed_packages
        self.cache = cache
        self.config = config
        self.ttl_hours = config['caching']['ttl_hours']
        self.logger = logging.getLogger(__name__)
        self.api_url = config['sources']['cve']['safety_db']['url']

    def fetch_data(self):
        response = requests.get(self.api_url, timeout=10)
        response.raise_for_status()
        return response.json()

    def fetch_vulnerabilities(self) -> List[Dict]:
        data = {}
        cache_key = "safety-db-python-vulns"

        if self.config['caching']['enabled']:
            cached_data = self.cache.get_cached_data(cache_key, self.ttl_hours)

            if cached_data:
                self.logger.info("‚úÖ Using cached safety-db data")
                data = cached_data

        if not data:
            self.logger.info("üîç Fetching safety-db data")
            data = self.fetch_data()
            if self.config['caching']['enabled']:
                self.cache.cache_data(cache_key, data)

        return self.normalize_data(data)
    
    def normalize_data(self, data):
        normalized = []

        for package, version in self.installed_packages:
            package_data = data.get(package, [])

            # Ensure package_data is a list
            if not isinstance(package_data, list):
                self.logger.warning(f"‚ö†Ô∏è Unexpected format for package {package}: {package_data}")
                continue

            for vuln in package_data:
                if isinstance(vuln, dict):
                    specs = vuln.get("specs", [])
                    
                    # Check if the installed version falls within the vulnerable range
                    for spec in specs:
                        if version in spec:  # This is a rough check, might need more logic
                            normalized.append({
                                "package": package,
                                "cve": vuln.get("cve", "Unknown"),
                                "severity": vuln.get("severity", "Unknown"),
                                "description": vuln.get("advisory", "No details available")
                            })
                            break  # Stop after first match

        return normalized
