import logging
from typing import Any, Dict, List

import requests

from .base import VulnerabilitySource


class OSVSource(VulnerabilitySource):
    def __init__(self, installed_packages: Dict[str, str], cache, ttl_hours: int = 24):
        self.installed_packages = installed_packages
        self.cache = cache
        self.ttl_hours = ttl_hours
        self.logger = logging.getLogger(__name__)
        self.api_url = "https://api.osv.dev/v1/querybatch"

    def build_osv_query(self) -> Dict[str, Any]:
        return {
            "queries": [
                {
                    "package": {
                        "name": name,
                        "ecosystem": "PyPI"
                    },
                    "version": version
                }
                for name, version in self.installed_packages.items()
            ]
        }

    def fetch_vulnerabilities(self) -> List[Dict]:
        data = {}
        cache_key = "osv-python-vulns"

        if self.cache:
            cached_data = self.cache.get_cached_data(cache_key, self.ttl_hours)

            if cached_data:
                self.logger.info("✅ Using cached OSV data")
                data = cached_data

        if not data:
            self.logger.info("🔍 Fetching OSV data")
            payload = self.build_osv_query()
            response = requests.post(self.api_url, json=payload, timeout=20)
            response.raise_for_status()
            data = response.json().get("results", [])
            if self.cache:
                self.cache.cache_data(cache_key, data)

        return self.normalize_data(data)
    
    def normalize_data(self, data: list[dict]):
        normalized = []

        for item in data:
            if not item.get("vulns"):
                continue

            for vuln_data in item["vulns"]:
                vuln = self.get_vulns_details(vuln_data['id'])
                affected_pkg = vuln.get("affected", [{}])[0].get("package", {}).get("name", "").lower()
                installed_version = self.installed_packages.get(affected_pkg)

                normalized.append({
                    "package_name": affected_pkg,
                    "installed_version": installed_version,
                    "vuln_id": vuln.get("id"),
                    "summary": vuln.get("summary"),
                    "severity": self._get_severity(vuln),
                    "cwes": self._extract_cwes(vuln),
                    "score": self._get_score(vuln),
                    "affected_versions": vuln.get("affected"),
                    "references": [r["url"] for r in vuln.get("references", []) if "url" in r],
                })

        return normalized
    
    def get_vulns_details(self, id: str) -> dict:
        try:
            detail_resp = requests.get(f"https://api.osv.dev/v1/vulns/{id}", timeout=10)
            detail_resp.raise_for_status()
            return detail_resp.json()
        except Exception as e:
            self.logger.warning(f"Failed to fetch OSV detail for {id}: {e}")
    
    def _get_score(self, vuln: Dict):
        severities = vuln.get("severity", [])
        for s in severities:
            if s.get("type") == "CVSS_V3":
                try:
                    return float(s["score"].split("/")[0])  # e.g. "7.5/10"
                except Exception:
                    pass
        return None

    def _get_severity(self, vuln: Dict) -> str:
        try:
            score = self._get_score(vuln)
            if score:
                return self._score_to_level(score)
        except Exception:
            pass
        return "unknown"

    def _score_to_level(self, score: float) -> str:
        if score <= 3.9:
            return "low"
        elif score <= 6.9:
            return "medium"
        elif score <= 8.9:
            return "high"
        return "critical"

    def _extract_cwes(self, vuln: Dict) -> List[str]:
        if vuln.get("database_specific", {}):
            return vuln['database_specific'].get('cwe_ids', [])
        return []

