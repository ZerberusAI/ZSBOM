validation_rules:
  enable_cve_check: true
  enable_abandoned_check: true
  enable_typosquatting_check: true
  enable_version_check: true
  enable_mitre_check: true  # New: Check for MITRE Python weaknesses

# Transitive dependency analysis configuration
transitive_analysis:
  pip_compile_timeout: 120  # seconds
  cache_ttl_hours: 24  # hours to cache pip-compile results
  include_in_risk_scoring: true  # Include transitive dependencies in risk scoring
  apply_depth_weighting: false  # Apply depth-based risk weighting (future enhancement)
  max_depth_to_score: 5  # Limit scoring depth for performance (future enhancement)

# Private repository configuration
private_repositories:
  index_url: ""  # Primary index (--index-url), empty means use PyPI
  extra_index_urls: []  # Additional indexes (--extra-index-url)
  trusted_hosts: []  # For self-signed certs (--trusted-host)
  find_links: []  # Additional package locations (--find-links)
  no_index: false  # Disable PyPI entirely (--no-index)

# Version consistency configuration for declared vs installed analysis
version_consistency:
  # File priority for dependency resolution (higher priority = preferred source)
  file_priority:
    - "pyproject.toml"
    - "requirements.txt"
    - "setup.py"
    - "setup.cfg"
    - "Pipfile"
  
  # Files to ignore during analysis
  ignore_files:
    - "requirements-dev.txt"
    - "test-requirements.txt"
    - "docs-requirements.txt"
  
  # Cross-file consistency checking settings
  cross_file_analysis:
    enabled: true
    # Treat different but compatible specs as minor conflicts
    compatible_as_minor_conflict: true
    # Log detailed conflict information
    detailed_conflict_logging: true

abandoned_packages:
  - "oldlib"
  - "unmaintained-pkg"

# Typosquatting detection configuration
typosquat_detection:
  enabled: true
  top_packages_url: "https://hugovk.github.io/top-pypi-packages/top-pypi-packages-30-days.min.json"
  download_thresholds:
    high: 1000
    medium: 500
    low: 100
  similarity_threshold: 2  # Levenshtein distance threshold for creation date factor
  new_package_days: 90     # Days threshold for considering a package "new"
  cache_ttl:
    top_packages_hours: 48  # 2 days cache for top packages
    pypi_metadata_hours: 1  # 1 hour cache for PyPI metadata

# Typosquatting whitelist - packages known to be safe
typosquatting_whitelist:
  - "requests"
  - "numpy"
  - "flask"
  - "django"
  - "pip"
  - "wheel"
  - "setuptools"

min_versions:
  # flask: "2.0.0"
  requests: "2.26.0"
  # numpy: "1.21.0"

sources:
  cve:
    safety_db:
      enabled: false  # WIP
      url: "https://raw.githubusercontent.com/pyupio/safety-db/master/data/insecure_full.json"
    osv_dev:
      enabled: true
      url: "https://api.osv.dev/v1"
  cwe:
    mitre_weaknesses: 
      enabled: true
      url: "https://cwe.mitre.org/data/xml/cwec_latest.xml.zip"  # New: MITRE Python CWE list
    nvd_weaknesses: # Fallback to MITRE CWE
      url: "https://services.nvd.nist.gov/rest/json/cves/2.0"

output:
  report_file: "validation_report.json"
  sbom_file: "sbom.json"
  risk_file: "risk_report.json"
  dependencies_file: "dependencies.json"
# Risk scoring weights (ZSBOM Risk Scoring Framework v1.0)
risk_model:
  weights:
    # Percentage weights (must total 100%)
    declared_vs_installed: 15  # Version mismatch between declared and installed
    known_cves: 30            # CVEs mapped from OSV.dev/NVD feeds
    cwe_coverage: 20          # Mapped CWEs and their severity classifications
    package_abandonment: 20   # Commit activity, release frequency, and last commit timing
    typosquat_heuristics: 15  # Fuzzy matching and typo-detection against known safe packages
  risk_thresholds:
    low_risk_threshold: 80    # 80-100 = Low Risk
    medium_risk_threshold: 50 # 50-79 = Medium Risk
                              # 0-49 = High Risk
  default_scores:
    # Default scores for when external data is unavailable (0-10 scale)
    pypi_unavailable_score: 5.0  # Moderate score for packages not found on PyPI


caching:
  enabled: false
  database: "sqlite"  # or "postgresql"
  path: ".cache/zsbom.db"
  ttl_hours: 24

# External data enhancers
enhancers:
  github:
    # GitHub token for API authentication (increases rate limit from 60/hour to 5000/hour)
    # Can be set here or via GITHUB_TOKEN / GH_TOKEN environment variables
    # In GitHub Actions, use: secrets.GITHUB_TOKEN (automatically provided)
    token: ""

# NEW: Trace-AI upload configuration (Phase 5)
trace_ai:
  upload:
    enabled: false  # Controlled by environment variables
    max_file_size_mb: 5
    allowed_formats: [".json"]
    timeout_seconds: 300
    max_retries: 3
    parallel_uploads: 3
    
  api:
    endpoints:
      scan_initiate: "/trace-ai/scans/initiate"
      upload_urls: "/trace-ai/scans/{scan_id}/upload-urls"
      complete: "/trace-ai/scans/{scan_id}/complete"
    
    headers:
      org_key: "X-Zerberus-Org-Key"
      project_key: "X-Zerberus-Project-Key"
      content_type: "application/json"
    
  files:
    # Mapping of ZSBOM files to upload names
    dependencies: "dependencies.json"
    vulnerabilities: "vulnerabilities.json"  # Renamed from validation_report.json
    sbom: "sbom.json"
    risk_analysis: "risk_analysis.json"      # Renamed from risk_report.json
    metadata: "scan_metadata.json"
    
  user_experience:
    progress_bar_style: "cyan"
    success_emoji: "üéâ"
    warning_emoji: "‚ö†Ô∏è"
    error_emoji: "‚ùå"
    upload_emoji: "üöÄ"

notifications:
  gchat:
    enabled: false
    # Example Webhook_url: "https://chat.googleapis.com/v1/spaces/AAAAdzD-Yps/messages?key=*&token=*"
    webhook_url: ""  # Add your Google Chat webhook URL here
    notification_level: "critical"  # Options: all, critical, none
